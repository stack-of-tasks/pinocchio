//
// Copyright (c) 2016 CNRS
// Author: Florian Valenza
//
// This file is part of Pinocchio
// Pinocchio is free software: you can redistribute it
// and/or modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation, either version
// 3 of the License, or (at your option) any later version.
//
// Pinocchio is distributed in the hope that it will be
// useful, but WITHOUT ANY WARRANTY; without even the implied warranty
// of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// General Lesser Public License for more details. You should have
// received a copy of the GNU Lesser General Public License along with
// Pinocchio If not, see
// <http://www.gnu.org/licenses/>.

namespace pinocchio
{
  
/** \page GettingStarted_simple_huma_FD Forward Dynamic 

Here is an example on how simple it is to use pinocchio API to build a really simple model and compute forward dynamics (Recursive Newton Euler Algorithm)

\code
#include "pinocchio/multibody/model.hpp"
#include "pinocchio/parsers/sample-models.hpp"

int main (int argc, char* argv[]) {

  using namespace se3;

  Model model; buildModels::humanoidSimple(model);
  Data data(model);

  std::cout << model << std::endl;

  Eigen::VectorXd q = Eigen::VectorXd::Random(model.nq);
  Eigen::VectorXd v = Eigen::VectorXd::Random(model.nv);
  Eigen::VectorXd a = Eigen::VectorXd::Random(model.nv);

  Eigen::VectorXd tau = rnea(model, data, q, v , a);
  
  std::cout << tau << std::endl;

  return 0;
}
\endcode

The humanoidSimple function populates the model with only simple revolute joints(whose axis is either X, Y or Z). If you want to create models differently, please refer to \ref Chapters_CreatingModels to see all the possibilities. 


*/  
}