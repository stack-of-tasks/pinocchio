//
// Copyright (c) 2016 CNRS
// Author: Florent Lamiraux, Justin Carpentier, Florian Valenza
//
// This file is part of Pinocchio
// Pinocchio is free software: you can redistribute it
// and/or modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation, either version
// 3 of the License, or (at your option) any later version.
//
// Pinocchio is distributed in the hope that it will be
// useful, but WITHOUT ANY WARRANTY; without even the implied warranty
// of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// General Lesser Public License for more details. You should have
// received a copy of the GNU Lesser General Public License along with
// Pinocchio If not, see
// <http://www.gnu.org/licenses/>.

namespace pinocchio
{
  
/** \page Chapters_CreatingModels Creating models

In Pinocchio you can create Models in many ways. We have built-in parsers for different kind of format ( urdf, python, Lua)
but you can also create a Model from scratch and fill it with the Joints you want.

\section Chapters_CreatingModels_BuiltInModels Built-In Models
in simple-models...

\section Chapters_CreatingModels_FileParsing Parsing different extensions

\subsection Chapters_CreatingModels_urdf Format urdf

To load an urdf file in C++ code, copy the following lines:
\code
#include <pinocchio/multibody/model.hpp>
#include <pinocchio/multibody/parser/urdf.hpp>
#include <pinocchio/multibody/parser/utils.hpp>
#include <pinocchio/multibody/joint.hpp>

bool verbose = false;
const std::string filename = "path/to/file/model.urdf";
se3::JointModelFreeflyer rootJoint;
se3::Model model = se3::urdf::buildModel (filename, rootJoint, verbose);
se3::Data data (model);
\endcode

\subsection Chapters_CreatingModels_Python Format Python

To load a python file in C++ code, copy the following lines:
\code
#include "pinocchio/multibody/model.hpp"
#include "pinocchio/parsers/python.hpp"

const std::string filename = "path/to/file/model.py";

se3::Model model = se3::python::buildModel(filename,"model",false);
se3::Data data(model);

\endcode

\subsection Chapters_CreatingModels_lua Format lua

To load an lua file in C++ code, copy the following lines:
\code
#include <pinocchio/multibody/model.hpp>
#include <pinocchio/multibody/parser/lua.hpp>
#include <pinocchio/multibody/parser/utils.hpp>
#include <pinocchio/multibody/joint.hpp>

bool freeflyer = true;
const std::string filename = "path/to/file/model.lua";
se3::Model model = se3::lua::buildModel (filename, freeflyer);
se3::Data data (model);
\endcode

\section Chapters_CreatingModels_FromScratch Build your model joint by joint

When creating a Model, the first joint is representing the root of the world and is called universe.

\subsection FromScratch_Cplusplus In C++

\code
#include "pinocchio/multibody/model.hpp"

Model model;
idx = model.addJoint(model.getJointId("universe"),JointModelFreeFlyer(),SE3::Identity(),"ff_joint");
model.appendBodyToJoint(idx,Inertia::Random(),SE3::Identity(),"ff_body");

idx = model.addJoint(model.getJointId("ff_joint"),JointModelRY(),SE3::Identity(),"lleg1_joint");
model.appendBodyToJoint(idx,Inertia::Random(),SE3::Identity(),"lleg1_body");

\endcode

\subsection FromScratch_Python In Python

Python API is almost as simple to use as the C++ one to create a robot. There is a slightly difference when creating an empty Model beca use of the library

\code
 import pinocchio as se3
 m = se3.Model.BuildEmptyModel() 
 m.addJoint() // ...
 m.appendBody() // ...
\endcode

*/  
}