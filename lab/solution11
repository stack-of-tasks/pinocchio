Solution to question 11
-----------------------

[source,python]
----
from copy import copy
class LeftAnkleRef (object):
    def __init__ (self, times, steps) :
        self.times = times
        self.steps = steps
        self._computeSegments ()
    # Operator ()
    def __call__ (self, t):
        for segment in self.segments [::-1]:
            t0 = segment [2]
            if t >= t0:
                a = segment [0]
                b = segment [1]
                zmp = a * (t-t0) + b
                return zmp
    # Initialization
    def _computeSegments (self):
        self.segments = []
        if len (self.times) < 2:
            raise RuntimeError ("wrong input: times should contain at " +
                                "least 2 elements.")
        if len (self.times) != 2 * len (steps) - 2:
            raise RuntimeError ("wrong input: number of steps and number "
                                + "times do not match.")
        t0 = self.times [0]
        if len (times) >= 4:
            t3 = self.times [3]
        else:
            t3 = self.times [-1]
        a = array ([0.,0.])
        b = array (self.steps [1])
        self.segments.append ((a [::], b [::], copy (t0)))
        nbSegments = 1
        while len (times) >= 2 * nbSegments + 3:
            t0 = self.times [2 * nbSegments + 1]
            t1 = self.times [2 * nbSegments + 2]
            s0 = array (self.steps [nbSegments])
            s1 = array (self.steps [nbSegments + 2])
----
