Stack of tasks lab: optimal control
===================================

Objective
---------

The objective of this part is to generate a dynamically balanced walk motion
for the humanoid robot as time-varying reference tasks for each foot and for the
center of mass of the robot.

Tutorial 8: ploting curves
--------------------------

In the following tutorials, we will have to define functions. In order
to be able to debug these function, we will use a tool called
+matplotlib+ that plots values on a 2D graph.

[source, python]
----
import matplotlib.pyplot as pl
from numpy import array

# Build numpy array for x axis
x = Dt * array (range (100))
# Build numpy array for y axis
y = x**2

fig = pl.figure ()
ax = fig.add_subplot ('111')
ax.plot (x, y)
ax.legend (("x^2",))

pl.show ()
----

Tutorial 9: defining input
--------------------------

The input of the walk generation algorithm is a sequence of steps with a given
timing. This input will be represented by two sequences as in the examples
below.

[source, python]
----
times = [0.0, 0.3, 1.0, 1.1, 1.8, 1.9, 2.6, 2.7, 3.4, 3.5, 4.2, 3.7]
steps = [(0.010, -0.096), (0.010, 0.096),
         (0.210, -0.096), (0.410, 0.096),
         (0.610, -0.096), (0.810, 0.096),
         (0.810, -0.096)]
----

+times+ represents a sequence of [black]_m_ instants or [black]_m-1_ intervals.

+steps+ represents a sequence of [black]_p_ steps. Only the x, y coordinate of
the translation part of each ankle is given.

Each interval corresponds to the following constant support phases:

["latex"]
\begin{tabular}{lll}
$\left[t_0,t_1\right]$ &double support phase& left foot in steps [0], right foot in steps [1] \\
$\left[t_1,t_2\right]$ &left foot support phase& right foot moving to steps [2]\\
$\left[t_2,t_3\right]$ &double support phase,& \\
$\left[t_3,t_4\right]$ &right foot support phase,& left foot moving to steps [3]\\
&\vdots&\\
$\left[t_{m-2}, t_{m-1}\right]$ &double support phase,& left foot in steps [p-2], right foot in steps [p-1]
\end{tabular}

Tutorial 10: computing reference ZMP
------------------------------------

*Question:* implement a python class called +ZmpRef+ that takes as input a
sequence of times and a sequence of steps. Objects of this class behave as
a function of time that returns a 2 dimensional vector:

[source, python]
----
>>> zmp = ZmpRef (times, steps)
>>> zmp (2.5)
array([ 0.41 ,  0.096])
----

The function should be a piecewise affine function

- starting in the middle of the ankles of the two first steps,
- finishing in the middle of the two ankles of the two last steps,
- constant under the foot support during single support phases.

You can use the template below.

[source, python]
----
class ZmpRef (object):
    def __init__ (self, times, steps) :
        self.times = times
        self.steps = steps
    # Operator ()
    def __call__ (self, t):
    	return array (self.steps [0])
----

For the inputs provided above, the graph of +zmp+ is given below.

image::images/zmp-ref.png[width="100%",alt="zmp_ref against time"]

Tutorial 11: reference trajectories of the feet
-----------------------------------------------

Using the same method as in Tutorial 10, implement two classes +RightAnkleRef+
and +LeftAnkleRef+ that return reference positions of the ankles as homogeneous
matrices. Unlike zmp reference, trajectories of the feet should be continuously differentiable.

Tutorial 12: reference trajectory of the center of mass
-------------------------------------------------------

Using the reference zmp trajectory implemented in Tutorial 10,
implement a class +ComRef+ that computes the reference trajectory of
the center of mass by optimal control.

Tutorial 13: generate walk motion
---------------------------------

Use the classes defined in the previous sections to generate a walk motion using
the inverse kinematics solver of Tutorial 6.
