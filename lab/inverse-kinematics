Stack of Tasks lab: inverse kinematics
======================================

Objective
---------
In this first series of exercises, we are going to take in hand the library Pinocchio in order to build a model
of a robot, display this robot in a graphical user interface and control the robot to achieve geometric tasks.
We will first try to achieve a positioning task for one hand, then we will enforce the static balance of the robot.
Finally, we will implement a hierarchy of task in order to achieve both task : to reach a desired position for the hand
ensuring we are in a statically balanced position.

The software Pinocchio is a C++ library provided with a python wrapping that allows us to control it with a python terminal.
Let's see how it works.

Tutorial 0. Tips
----------------
Python
~~~~~~
We remind you that you can open a python terminal in your own shell. Simply type :
bash terminal
....
student@student-virtualbox:~$ python
>>>
....
Afterwards you'll just have to type your commands in this newly opened terminal.

To close the python terminal, just type CTRL-D (CTRL-C first to interrupt any on-going execution).

You can also write you command lines in a file and launch this script without entering the interactive mode
(ie. without starting a new python terminal). In your shell, just type:
bash terminal
....
student@student-virtualbox:~$ python script.py
>>>
....

Pinocchio
~~~~~~~~~


*Basic mathematical objects:*

In the following, we will use numpy Matrix class to represent matrices and vectors.
In numpy, vectors simply are matrices with one column. See the following example.
[source, python]
----
import numpy as np
A = np.matrix([ [1,2,3,4],[5,6,7,8]]) # Define a 2x4 matrix
b = np.zeros([4,1])   # Define a 4 vector (ie a 4x1 matrix) initialized with 0.
c = A*b               # Obtain c by multiplying A by b.
----

A bunch of useful functions are packaged in the utils of pinocchio.

[source,python]
----
from pinocchio.utils import *
eye(6)                    # Return a 6x6 identity matrix
zero(6)                   # Return a zero 6x1 vector
zero([6,4])               # Return az zero 6x4 matrix
rand(6)                   # Random 6x1 vector
isapprox(zero(6),rand(6)) # Test epsilon equality
mprint(rand([6,6]))       # Matlab-style print
skew(rand(3))             # Skew "cross-product" 3x3 matrix from a 3x1 vector
cross(rand(3),rand(3))    # Cross product of R^3
rotate('x',0.4)           # Build a rotation matrix of 0.4rad around X.
----

Specific classes are defined to represent objects of SE(3), se(3) and se(3)^*. Rigid displacements, elements of SE(3), are represented by the class SE3.

[source,python]
----
import pinocchio as se3
R = eye(3); p = zero(3)
M0 = se3.SE3(R,p)
M = se3.SE3.Random()
M.translation = p; M.rotation = R
----

Spatial velocities, elements of se(3) = M^6, are represented by the class Motion.

[source,python]
----
v = zero(3); w = zero(3)
nu0 = se3.Motion(v,w)
nu = se3.Motion.Random()
nu.linear = v; nu.angular = w
----

Spatial forces, elements of se(3)^* = F^6, are represented by the class Force.

[source,python]
----
f = zero(3); tau = zero(3)
phi0 = se3.Force(f,tau)
phi = se3.Force.Random()
phi.linear = f; phi.angular = tau
----


Tutorial 1. Creating and displaying the robot
---------------------------------------------

Robot kinematic tree
~~~~~~~~~~~~~~~~~~~~

The kinematic tree is represented by two C\++ objects called Model (which
contains the model constants: lengths, masses, names, etc) and Data (which
contains the working memory used by the model algorithms). Both C\++ objects are
contained in a unique Python class. Two classes are currently available.
The first one is called RobotWrapper and is generic. This is the one you should use
with your own urdf model.
The second one is called RomeoWrapper and is correlated to the romeo_small.urdf provided with
the package. It implements some shortcuts specifics to our model and specify a half-sitting
configuration.

For the next steps, we are going to work with the RomeoWrapper.

Import the class +RomeoWrapper+ and create an instance of this class in the
python terminal. At initialization, RomeoWrapper will read the model
description in the URDF file given as argument. In the following, we will use
the model of the Romeo robot, available in the directory "models" of Pinocchio.

[source, python]
----
from pinocchio.romeo_wrapper import RomeoWrapper

robot = RomeoWrapper('path/to/urdf/romeo_small.urdf')
----
The code of the RomeoWrapper class is in /path/to/pinocchio//src/python/romeo_wrapper.py . Do not hesitate to have a look at it and to take inspiration from the implementation of the class functions.

Exploring the model
~~~~~~~~~~~~~~~~~~~

The robot model is available in robot.model. It contains the names of all the
robot joint [names], the kinematic tree [parents] (i.e. the graph of parents, 0
being the root and having no parents), the position of the current joint in the
parent coordinate frame [jointPosition], the mass, inertia and
center-of-gravity position of all the bodies (condensed in a spatial inertia
6x6 matrix) [inertias] and the gravity of the associated world [gravity]. All
these functions are documented and are available in the correponding class
dictionnary.

[source,python]
----
for name,function in robot.model.__class__.__dict__.items():
  print " **** ", name, ": ", function.__doc__
----

Similarly, the robot data are available in robot.data. All the variables
allocated by the classical rigid-body dynamics algorithms are stored in
robot.data and are available through the python wrapping. Similarly to the
model object, the function are documented and are available from the class
dictionnary. The most useful in the following will be the placement of the
frame associated which each joint output stored in robot.data.oMi.

For example, the right hand of Romeo corresponds to the output of the right
wrist joint, called RWristPitch. The ID of the joint in the joint list can be
recovered from its name, and then used to access its placement:

[source,python]
----
def index(self,name):
   return [ idx for idx,name in enumerate(robot.model.names) if name=="RWristPitch" ][0]

# Get the placement of joint number idx
placement = robot.data.oMi[idx]
----

Shortcuts are implemented for the right wrist (rh), left
wrist (lh), right ankle (rf) and left ankle (lf). You can get the placement
corresponding to the right hand with robot.Mrh(q) and the corresponding
Jacobian (6D, expressed in the body frame) with robot.Jrh.

Finally, some recurring datas (used in Model and Data) have been wrapped to functions in some
python shortcuts, also available in RomeoWrapper:
+The size of the robot configuration is given by nq.
+The dimension of its tangent space (velocity) is nv.
+The index of a joint in the tree can be accessed from its name by index (see above).
+The classical algorithms are also binded: com, Jcom, mass, biais, joint gravity, position and velocity of each joint.
+Shortcuts are also implemented for the placement and the Jacobian (6D, expressed in the body frame) of
the right wrist(rh), left wrist(lh), right ankle(rf), left ankle (lf).For example, you can access the right wrist
placement and Jacobian with robot.Mrh(q) and robot.Jrh(q)

[source,python]
----
q = zero(robot.nq)
v = rand(robot.nv)
robot.com(q)            # Compute the robot center of mass.
robot.position(q,23)    # Compute the placement of joint 23
----

Display the robot
~~~~~~~~~~~~~~~~~

To display the robot, we need an external program called +Gepetto Viewer+.
If you completed the installation in the previous page, you can launch this
program, open a new terminal in an empty workspace.

....
student@student-virtualbox:~$ gepetto-viewer-server
....
This will start a server waiting for instructions. We will now create a client that will ask
the server to perform some requests (such as creating a window or displaying our robot)
In a python terminal you can test the following :

[source,python]
----
from gepetto.corbaserver import Client
client = Client ()
# open a new window
client.gui.createWindow ("w")
----

This should have opened a window referenced as "w" in the gepetto-server. But this window is empty.
In order to display the robot, we need to load its visual geometry. This can be performed with:

[source,python]
----
from gepetto.corbaserver import Client
client=Client()
client.gui.createWindow("w")
client.gui.createSceneWithFloor("world")
client.gui.addSceneToWindow("world","w")
client.gui.addURDF("world/romeo","/path/to/urdf//romeo_small.urdf","/path/to/meshes/dir/")
----

Be careful : Using the +addURDF+ method, you load the robot in memory and parse the urdf file.
The representation in the viewver is such that it need to have a root node that need to be added to the world.
That's why we set the root node as world/romeo in the above example. Moreover the kinematic chain in gepetto
viewer is slightly different from the one in pinocchio. In the viewer, the bodies are stored as nodes
whereas in Pinocchio we store the joints. You can get the list of the node links in gepetto viewer typing
in your python terminal :
[source,python]
----
client.gui.getNodeList()
----
This list will be printed in the terminal running the gepetto viewer.

You will also note that all the bodies are displayed at the same location. In fact, the viewer only loads
the meshes associated to the links of our robot. If you want to move these bodies, you can use
 +applyConfiguration("node",config)+:
[source,python]
----
q1 = [1,1,1,1,0,0,0]
client.gui.applyConfiguration('world/romeo/HeadRollLink',q1)
client.gui.refresh() # Refresh the window.
----


Publishing the robot configuration
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

*Objectives:* Touch the difference between Pinocchio and Gepetto-viewer kinematic trees.
Play with SE3, display rigid bodies in the world, compute and update the robot position.

Previously, we have seen how to load the robot model in Pinocchio and in the gepetto-viewer.
And how to update the placement of a body in the viewer. Now we will see the correspondance
between the model in Pinocchio and the one in the viewer.

The body origin is attached to the parent joint location (plus an offset). So to display the
body attached to a joint (e.g the left arm attached to the left shoulder), we only need the coordinates
of the joint.
Hence, to display the Head in the viewer, we compute the position of the joint parent of the head link.
This joint is 'HeadRoll'

[source,python]
----
head_joint_id = robot.index('HeadRoll')
M = robot.position(robot.q0,head_joint_id)
----
The placement of every joint is computed using +robot.position+. This function returns an object M
of class se3.SE3. The two main fields are M.translation (3x1 vector) and M.rotation (3x3 orthogonal matrix)
. The corresponding homogeneous matrix is given by M.homogeneous. This matrix must be converted into a
configuration vector of dimension 7 (x,y,z + a quaternion). You can perform it  with:

[source,python]
----
robot.se3ToConfig(M)
----

*Question:*  For each body in the gepetto-viewer, retrieve the associated joint then its placement
and display the robot Romeo in the viewer.

As all of the joints do not have a body representation (for exemple, HeadPitch), and that it is pretty heavy
to compute and update the placement of each body by hand, a function has been implemented in the romeowrapper.

[source,python]
----
robot.display(robot.q0)
----

This function compute the placement of each joints that have a body attached to them and
update the body corresponding in the viewer (communicating the new position, orientation and refreshing the
window). To do so, we bind the Pinocchio robot to the one in the gepetto viewer by initializint the
connexion. The argument needed is the root node of the romeo tree in gepetto-viewer.
[source,python]
----
robot.initDisplay("world/romeo/")
----


Moving the robot joints
~~~~~~~~~~~~~~~~~~~~~~~

*Objective:* Touch the difference between a simple integration in R^n and the
 exponential map in SE3.

The robot configuration q and velocity qdot do not have the same dimension.

*Why?*

The placement of the robot hip in the world is given by 3 translation q[0,0],
q[1,0], q[2,0] and a quaternion q[3:7], total 7 parameters. On the opposite,
the hip velocity is given by the spatial velocity (element of the Lie Algebra
se(3)) representing the relative movement of the world and the hip frames,
written using the coordinate system of the world frame. This corresponds to 3
linear velocities qdot[0:3] and 3 angular ones qdot[3:6]. Total, 6 parameters.

Consider first the 31 last parameters. They are straightforward to integrate
along time. Let us provide a constant angular velocity to the left shoulder.
[source,python]
----
#Do not forget to launch the viewer and establish connexion with initDisplay
q = robot.q0
qdot = zero(robot.nv)
qdot[20] = 1
dt = 5e-3
for i in range(1000):
    q[7:] += qdot[6:]*dt
    robot.display(q)
----
Looking in the display, the robot left arm rotates around the shoulder.

This will not work for the rotation velocity. Try to increase directly the
quaternion would lead to inconsistancy:
[source,python]
----
qdot[3] = 10
for i in range(100):
    q[3] += qdot[3]*dt
    robot.display(q)
----

*What happened?*

The quaternion norm is bigger than one, which then leads to a non orthonormal
matrix... the display explodes. We will integrate properly in the next Tutorial.


Tutorial 2: Integration in a Lie Group
--------------------------------------

*Objectives:* Use the exponential of SE(3) to move one body in space.

Integration in SE(3)
~~~~~~~~~~~~~~~~~~~~

To properly integrate, it is necessary to rely on the exponential map of SE(3),
that will produce a proper homogeneous matrix by integration of a constant
se(3) velocity. The exponential map for both SE(3) and SO(3) is available in
Pinocchio. First consider moving a single body with a constant velocity. What would
be the corresponding trajectory?

[source,python]
----
import pinocchio as se3
N = 1000
v = zero(3); v[2] = 1.0 / N
w = zero(3); w[1] = 1.0 / N
nu = se3.Motion( v, w )

M = se3.SE3.Identity()
robot.updateJointConfiguration(robot.se3ToConfig(M),'HeadRoll')

for i in range(N):
   M = M*se3.exp(nu)
   robot.updateJointConfiguration(robot.se3ToConfig(M),'HeadRoll')
----

The exponential map integrates the se(3) velocity expressed in the body
frame. When the body rotates, the direction of the movement in the world frame
rotates as well (since it is constant in the body frame).

It is also possible to consider the velocity as constant in the world frame w_nu. In
that case, the integration is done on the left, by M = se3.exp(w_nu). Try to
imagine the resulting trajectory before executing it. Why is it not what you
thought? Remember that w_nu is a se(3) element. What represents its linear component?

*Question:* During the integration, modify the body velocity so that the
 linear movement of the body in the world is constant.

Log in SE(3)
~~~~~~~~~~~~

Now, let us move the body to a given position Mdes. The velocity to be
integrate during a unit time interval is given by the log. It is possible to
interpolate the movement trivially, since the exponential of two colinear
elements comutes.

[source,python]
----
N = 1000
Mdes = se3.SE3.Random()
nu = se3.log(M.inverse()*Mdes)

for i in range(N):
    M = M*se3.exp(nu.vector()/N)
    robot.updateJointConfiguration(robot.se3ToConfig(M),'HeadRoll')
----

Here, nu is the applied velocity expressed in the body frame; we therefore integrate on the right.
Double check that the obtained placement is exactly equals to the desired one.

The same can be applied online in the loop to adapt the velocity to the current
position (no interrest except scholar in the case of a perfect integration; it
would be more interesting within a non-linear optimization scheme, see below).

[source,python]
----
def errorInSE3( M,Mdes):
  '''
    Compute a 6-dim error vector (6x1 np.maptrix) caracterizing the difference
    between M and Mdes, both element of SE3.
  '''
  error = se3.log(M.inverse()*Mdes)
  return error.vector()

N = 1000
Mdes = se3.SE3.Random()
gain = 1.0 / N
for i in range(N):
    nu = gain*errorInSE3(M,Mdes)   # nu is the desired spatial velocity.
    M = M*se3.exp(nu)
    robot.updateJointConfiguration(robot.se3ToConfig(M),'HeadRoll')
----

Integration of a non-trivial Lie Group
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The 7 first components of q are the hip position and orientation (stored as a
quaternion. The 6 first components of qdot are the se(3) velocity of the hip in
the body frame. The velocity integrates on the right.

An additionnal step has to be added to obtain the SE(3) element from and back
to quaternion. This can be done using the se3.Quaternion class.

[source,python]
----
import pinocchio as se3
def robotint(q,dq):
    M = se3.SE3( se3.Quaternion(q[6,0],q[3,0],q[4,0],q[5,0]).matrix(), q[:3])
    dM = exp(dq[:6])
    M = M*dM
    q[:3] = M.translation
    q[3:7] = se3.Quaternion(M.rotation).coeffs()
    q[7:] += dq[6:]
----

qd is an increment (i.e. qdot*dt). The class se3.Quaternion is initialized from
the 4 components w,x,y,z of the quaternion (take care, this is not the same
order than the coeffs in q, as w is arbitrarily stored in head or tail). The
corresponding rotation matrix is obtained from quat.matrix(). It is composed
with the results of the exponential map. The obtained placement is finally
restored as a vector and stored in q. For the revolute joint parameters, the
integration is straightforward.

The integration function is available in the RomeoWrapper class with
increment(q,dq).


Tutorial 3: solving one real-valued geometric task
--------------------------------------------------

*Objective:* Creating a motion from a real-valued geometric task and making the
	     robot regulate the error to 0.

Let us assume that we want to bring the center of the right wrist at abscissa 3
in the global frame.
[latex]
$x_{rw}^* = 3$

We define the task error as the difference between the wrist abscissa in current
configuration and the goal abscissa.
["latex"]
$\displaystyle{e (\textbf{q}) = x_{rw} (\textbf{q}) - x_{rw}^{*}}$

We wish to impose
["latex"]
$\displaystyle{\dot{e} = -k\ e}$

where k is a scalar parameter called gain, so that the error converges to 0.

As the error depends on the configuration, the variation of the error depends on
the variation of the configuration through the gradient (considered as a row
vector):
["latex"]
$\displaystyle{\dot{e} = \nabla x_{rw}(\textbf{q})\ \dot{\textbf{q}}}$

Together with the proportional control of the error above, this latter equation
defines for any configuration an affine equation on the robot velocity.

["latex"]
$\displaystyle{\nabla x_{rw}(\textbf{q})\ \dot{\textbf{q}} = -k\ e}$

The gradient is obtained from the tangent to the map which from q gives the
SE(3) placement of the hand. The tangent is available from the function
robot.Jrh(q). The tangent is expressed in the body frame. We are interrested by
the variation of the position (translation only) of the hand in the world. This
is obtained by rotating the three first rows of the tangent to expressed it in the world:
$\displaystyle{\frac{\partial (x,y,z)}{\partial q} = \ ^wR_{rw} \ ^{rw}J_{rw}[0:3,:]}$
where [0:3,:] denotes the selection of the three first rows.

*Question:* Given the gradient of the error, the gain, and the value of the
	  error, compute a derivative of the configuration solution to
	  the above equation.

link:solution1.html[*Solution*]

Tutorial 4: solving one vector-valued geometric task
----------------------------------------------------

*Objective:* Creating a motion from a vector-valued geometric task and making
	     the robot regulate the error to 0.

With an objective in R^3
~~~~~~~~~~~~~~~~~~~~~~~~

Now, we want to bring the center of the left wrist at position (0,0,3)
in the global frame.
[latex]
$\textbf{lw}^{*} = (0,0,2)$

We define the task error as the vector-valued difference between the wrist
position in current configuration and the goal position.
["latex"]
$\displaystyle{\textbf{e} (\textbf{q}) = \textbf{lw} (\textbf{q}) - \textbf{lw}^{*}}$

We wish to impose
["latex"]
$\displaystyle{\dot{\textbf{e}} = -k\ \textbf{e}}$

The variation of the error now depends on the variation of the configuration
through the Jacobian matrix:
["latex"]
$\displaystyle{\dot{\textbf{e}} =  J_{lw}(\textbf{q})\ \dot{\textbf{q}}\ \ \ \ \ \mbox{where} \ \ \ \ \ J_{lw} = \frac{\partial \textbf{lw}}{\partial \textbf{q}}}$

Together with the proportional control of the error above, this latter equation
defines for any configuration an affine equation on the robot velocity.

["latex"]
$\displaystyle{ J_{lw}(\textbf{q})\ \dot{\textbf{q}} = -k\ \textbf{e}}$

*Question:* Given the value of the error (given by
	  'errorInSE3(robot.Mrh(q),Mdes)'), the Jacobian of the error (given by
	  'robot.Jrh(q)') and the gain, compute a derivative of the
	  configuration solution to the above equation.

link:solution2.html[*Solution*]

With an objective in SE(3)
~~~~~~~~~~~~~~~~~~~~~~~~~~

Now combine the solution obtain for a SE(3) configuration in tutorial 2 to
compute the desired se(3) velocity of the hand that will bring it toward a
desired placement (position and orientation). The procedure is summarized as
follow: compute the error between current and desired placement in SE(3);
obtained the se(3) velocity to reduce this error using the logarithm; transform
this se(3) velocity into a configuration velocity using the pseudo inverse of
tangent map Jrh; integrate.

Tutorial 5: Back on earth
-------------------------

*Objective:* Putting the robot in stable equilibrium by defining a composite
	     task for the feet and the center of mass.

The right and left ankle position and tangent are available using robot.Mrf,
robot.Mlf, robot.Jrf, robot.Jlf. The center of mass position and tangent map
are given by robot.com and robot.Jcom.


*Question:* repeating tutorial 3, compute a motion moving the left ankle,
	  the right ankle and the center of mass to the reference values given
	  below.

[TIP]
To build a matrix by concatenating two matrix rows, you can use link:http://docs.scipy.org/doc/numpy/reference/generated/numpy.append.html[numpy.append].
You might wish to initialize a matrix with 0 row and a given number of columns.
you can use +matrix ([]).reshape (0, number_of_colums)+

Tutorial 6: solving a hierarchy of tasks
----------------------------------------

*Objective:* implementing a hierarchy of tasks with two levels. The higher
	     priority task is defined by the static balance task of Tutorial 5,
	     and the lower priority task is defined by a reaching task of the
	     right hand.

We now respectively denote by
["latex"]
$\displaystyle{\textbf{e}_1\in\mathbb{R}^{m_1},\ \ \ \textbf{e}_2\in\mathbb{R}^{m_2},\ \ \ J_1\in\mathbb{R}^{m_1\times n},\ \ \ J_2\in\mathbb{R}^{m_2\times n}}$

the higher and lower priority task errors and their Jacobian. For clarity, we do
not express anymore the dependency in the configuration of the robot. For each
task, we denote by
["latex"]
$\displaystyle{\dot{\textbf{e}}_1^{*}\in\mathbb{R}^{m_1},\ \ \ \dot{\textbf{e}}_2^{*}\in\mathbb{R}^{m_2}}$

the desired error derivatives.

The first task defines an affine equation on the configuration derivative:
["latex"]
$\displaystyle{J_1 \dot{\textbf{q}} = \dot{\textbf{e}}_{1}^{*}}$

As in Tutorial 3, The set of solution is an affine subspace defined by the
pseudo-inverse of the Jacobian:
["latex"]
$\displaystyle{\dot{\textbf{q}} = J_1^{+} \dot{\textbf{e}}_{1}^{*} + (I_n - J_1^{+}J_1)\textbf{u}\ \ \ \ \ \textbf{u}\in\mathbb{R}^n}$

[black]*u* is a free parameter that will be chosen to satisfy task 2.

*Question:* compute a configuration derivative in the sub-space of solutions of
task 1 that satisfies task 2. Tasks are defined as follows:

- Task 1: static balance, as in Tutorial 5,
- Task 2: reaching task for right wrist as defined below.

Tutorial 7: Adding a posture task
---------------------------------

We observe that the robot configuration is getting farther and farther from the
initial configuration. One reason is that the number of degrees of freedom
controlled by the two tasks of Tutorial 6 is still much smaller than the robot
total number of degrees of freedom. As we do not take into account joint limits,
this might lead to a joint moving beyond a limit. one simple way to overcome
this issue is to add a posture task at the lowest priority level.

The corresponding error is defined by
["latex"]
\begin{eqnarray*}
\textbf{e}_3 (\textbf {q}) &=& \textbf {q} - \textbf {q}^{*}
\end{eqnarray*}

where the desired posture is stored in +robot.q0+.

*Question:* Add a posture task to the stack of tasks of Tutorial 6.
