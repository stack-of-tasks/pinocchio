Solution to question 9
----------------------

[source,python]
----
from copy import copy
class ZmpRef (object):
    def __init__ (self, times, steps) :
        self.times = times
        self.steps = steps
        self._computeSegments ()
    # Operator ()
    def __call__ (self, t):
        for segment in self.segments [::-1]:
            t0 = segment [2]
            if t >= t0:
                a = segment [0]
                b = segment [1]
                zmp = a * (t-t0) + b
                return zmp
    # Initialization
    def _computeSegments (self):
        self.segments = []
        if len (self.times) < 2:
            raise RuntimeError ("wrong input: times should contain at " +
                                "least 2 elements.")
        if len (self.times) != 2 * len (steps) - 2:
            raise RuntimeError ("wrong input: number of steps and number "
                                + "times do not match.")
        t0 = self.times [0]
        t1 = self.times [1]
        s0 = array (self.steps [0])
        s1 = array (self.steps [1])
        zmp0 = .5 * (s0 + s1)
        zmp1 = s1
        a = (zmp1 - zmp0) / (t1 - t0)
        b = zmp0
        self.segments.append ((a [::], b [::], copy (t0),))
        nbSegments = 1
        stepId = 1
        while (nbSegments < len (self.times) - 2):
            t0 = self.times [nbSegments]
            t1 = self.times [nbSegments + 1]
            t2 = self.times [nbSegments + 2]
            s0 = array (self.steps [stepId])
            s1 = array (self.steps [stepId + 1])
            # For last step zmp stops between the feet
            if nbSegments + 2 == len (self.times) - 1:
                s1 = .5 * (s0 + s1)
            a = array ([0., 0.])
            b = s0
            self.segments.append ((a [::], b [::], copy (t0),))
            a = (s1 - s0)/(t2 - t1)
            b = s0
            self.segments.append ((a [::], b[::], copy (t1),))
            nbSegments += 2
            stepId += 1
        self.segments.append ((array ([0,0]), s1 [::],
                               copy (self.times [-1]),))

----
